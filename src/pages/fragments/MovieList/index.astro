---
import MovieCard from "@components/MovieCard.astro";
// import myFavMoviesByGenre from '@content/movies/myFavMoviesByGenre.json';

// Using Content Collections to fetch data:
// import { getCollection } from 'astro:content';

// const moviesCollection = await getCollection('movies');
// const moviesDetails = await Promise.all(moviesCollection.map(async (movie) => {
//   return Promise.all(movie.data.map(async (movieGenre) => {
//     // console.log('movieGenre: ', movieGenre.genre);
//     return Promise.all(movieGenre.movies.map(async (movie) => {
//       const response = await fetch(`https://api.themoviedb.org/3/movie/${movie.id}?api_key=${import.meta.env.TMDB_API_KEY}`);
//       const data = await response.json();
//       // Include genre information in the returned object
//       return { ...movie, ...data, genre: movieGenre.genre }; // Combine local movie data with fetched data and include genre
//     }));
//   }));
// }));
// // Flatten the array structure to make it easier to work with
// const flattenedMoviesDetails = moviesDetails.flat(2);

// // Now, since each movie object includes genre, this will correctly create a set of genres
// const Genres = [...new Set(flattenedMoviesDetails.map(movie => movie.genre))];

// -------------------  END Content Collection   --------------------------------------------------------------------------

// Fetch Popular Movies (Basic Workflow)
const popularMoviesResponse = await fetch(
  "https://api.themoviedb.org/3/movie/popular?api_key=" +
    import.meta.env.TMDB_API_KEY
);
const popularMoviesData = await popularMoviesResponse.json();
const popularMovies = popularMoviesData.results;

// -------------------  END Fetch Popular Movies (Basic Workflow)   --------------------------------------------------------

// Fetch My Favorite Movies by Genre (Old Workflow - Iterating over the myFavMoviesByGenre object)

// const Genres = Object.keys(myFavMoviesByGenre);
// const myFavMoviesByGenreDetails = {};

// for (const Genre of Genres) {
//   myFavMoviesByGenreDetails[Genre] = await Promise.all(
//     myFavMoviesByGenre[Genre].map(async (movie) => {
//       const response = await fetch(
//         `https://api.themoviedb.org/3/movie/${movie.id}?api_key=${
//           import.meta.env.TMDB_API_KEY
//         }`
//       );
//       const data = await response.json();
//       return data;
//     })
//   );
// }

// -------------------  END Fetch My Favorite Movies by Genre (Old Workflow)   --------------------------------------------------------

---

<main class="container mx-auto px-4 pt-16 mb-16">

<!-- <article class="popular-movies">
  <h1 class="uppercase tracking-wider text-orange-500 text-lg font-semibold">
    Juan's Favorite Movies
  </h1>
  <div class="mb-10 flex w-full flex-col flex-wrap items-center md:flex-row">
    {Genres.map((Genre) => (
      <div>
        <h2 class="uppercase tracking-wider text-orange-400 text-sm font-semibold pt-3 border-b-4 border-zinc-500 w-2/6 ">
          {Genre}
        </h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8">
          {flattenedMoviesDetails.filter(movie => movie.genre === Genre).map((movie) => (
            <MovieCard movie={movie} />
          ))}
        </div>
      </div>
    ))}
  </div>
</article> -->
  <!-- end NEW myFavMoviesByGenre-->


<!-- <article class="popular-movies">
      <h2 class="uppercase tracking-wider text-orange-500 text-lg font-semibold">
        Juan's Favorite Movies
      </h2>
      <div>
        {
          Genres.map((Genre) => (
        <div>
          <h2 class="uppercase tracking-wider text-orange-400 text-sm font-semibold pt-3 border-b-4 border-zinc-500 w-2/6 ">
            {Genre}
          </h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8">
            {myFavMoviesByGenreDetails[Genre].map((movie) => (
              <MovieCard movie={movie} />
              ))}
          </div>
        </div>
      ))
      }
    </div>
  </article> -->
  <!-- end OLD myFavMoviesByGenre-->

  <article class="popular-movies">
    <h2 class="uppercase tracking-wider text-orange-500 text-lg font-semibold">
      Popular Movies
    </h2>
    <div
      class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8"
    >
      {popularMovies.map((movie) => <MovieCard movie={movie} />)}
    </div>
  </article>
  <!-- end popular -->

</main>
