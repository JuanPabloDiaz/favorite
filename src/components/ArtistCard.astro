---
const { artist } = Astro.props;
const artistName = artist.disambiguation
  ? `${artist.name} (${artist.disambiguation})`
  : artist.name;
const imageUrl =
  artist.image_url ||
  `https://via.placeholder.com/500x750.png?text=${encodeURIComponent(artist.name)}`;
const displayOrigin = artist.area?.name || artist.country || 'N/A';
---

<div class="mt-8">
  <a
    href={`/artists/${artist.id}`}
    class="block aspect-[2/3] bg-gray-800 rounded-lg overflow-hidden"
  >
    <div class="relative w-full h-full">
      <img
        src={imageUrl}
        alt={`${artistName} Poster`}
        width="500"
        height="750"
        loading="lazy"
        decoding="async"
        class="thumbnail w-full h-full object-cover rounded-lg shadow-sm shadow-slate-600 hover:opacity-75 transition ease-in-out duration-300 hover:shadow-slate-50"
        id={`artist-poster-${artist.id}`}
      />
      <div class="absolute inset-0 bg-gray-800 animate-pulse" style="display: none;"></div>
    </div>
  </a>
  <div class="mt-2">
    <a href={`/artists/${artist.id}`} class="text-lg mt-2 hover:text-gray-300">{artistName}</a>
    <div class="flex items-center text-gray-400 text-sm mt-1">
      {
        artist.rating && artist.rating.value && (
          <>
            <svg class="fill-current text-orange-500 w-4" viewBox="0 0 24 24">
              <g data-name="Layer 2">
                <path
                  d="M17.56 21a1 1 0 01-.46-.11L12 18.22l-5.1 2.67a1 1 0 01-1.45-1.06l1-5.63-4.12-4a1 1 0 01-.25-1 1 1 0 01.81-.68l5.7-.83 2.51-5.13a1 1 0 011.8 0l2.54 5.12 5.7.83a1 1 0 01.81.68 1 1 0 01-.25 1l-4.12 4 1 5.63a1 1 0 01-.4 1 1 1 0 01-.62.18z"
                  data-name="star"
                />
              </g>
            </svg>
            <span class="ml-1">{artist.rating.value.toFixed(1)}</span>
            <span class="mx-2">|</span>
          </>
        )
      }
      <span>{displayOrigin}</span>
    </div>
    {
      artist.genres && artist.genres.length > 0 && (
        <div class="text-gray-400 text-sm mt-1">{artist.genres.map((g) => g.name).join(', ')}</div>
      )
    }
    {/* Fallback for genres from tags if genres is not available or empty */}
    {
      (!artist.genres || artist.genres.length === 0) && artist.tags && artist.tags.length > 0 && (
        <div class="text-gray-400 text-sm mt-1">{artist.tags.map((t) => t.name).join(', ')}</div>
      )
    }
  </div>
</div>

<script>
  // Image loading skeleton script (same as MovieCard and TvShowCard)
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.thumbnail');
    images.forEach((img) => {
      const pulseDiv = img.nextElementSibling;
      if (pulseDiv && pulseDiv.classList.contains('animate-pulse')) {
        pulseDiv.style.display = 'block';
      }

      if (img.complete) {
        if (pulseDiv) pulseDiv.style.display = 'none';
      } else {
        img.addEventListener('load', () => {
          if (pulseDiv) pulseDiv.style.display = 'none';
        });
        img.addEventListener('error', () => {
          // Keep placeholder or show error
          if (pulseDiv) pulseDiv.style.display = 'none';
          // Optionally, you could change the src to a 'not found' image here
          // img.src = '/path/to/image-not-found.png';
        });
      }
    });
  });
</script>
